# DOCKER_DEFAULTS provides the information needed to work with docker
# to find its data

# Variables that can be used in the values
# %(BASE_PATH)s will be replaced with the actual folder where erp-workbench is installed
# %(USER_HOME)s the home folder of the logged in user

DOCKER_DEFAULTS:
    # docker_hub_name:
    # what is the name of the dockerhub to use
    docker_hub_name: 'robertredcor'
    
    # docker_port:
    # this is the default port we assign to a docker container to use
    # it has to be adapted in the site description depending on what
    # server the site is running
    docker_port: 9000
    
    # docker_postgres_port
    # port at which the db container exports its port
    docker_postgres_port: 55432

    # the name of the container in which all database are created
    docker_db_container_name: 'db'
    
    # docker_db_user is used to access the database  in the database container
    docker_db_user: 'odoo'
    
    # docker_db_user_pw is the docker db user's password
    docker_db_user_pw: 'odoo'
    
    # docker_rpc_user is the user with which we want to login to the erp site running in the container
    docker_rpc_user: 'admin'

    # docker_rpc_user_pw docker rpc user's password
    # this is in most cases NOT 'admin'
    # you can overrule it with -ddbpw
    docker_rpc_user_pw: 'admin'
    
    # dumper_image:
    # when dumping a container based erp site site to its backup structure
    # a docker container is used that has access to databse container
    # where the sites data is maintained (normally this container is named db)
    # to create a this dumper container we need an image which uses pgdump
    # to dump the db.
    # since pgdump is database version dependent, the database container
    # and the dumper container need to use the same pgdump version.
    docker_dumper_image: 'robertredcor/dumper'

    # use_postgres_version
    # is used when creating the db image to define what postgres version to use
    use_postgres_version: '10.0'

    # erp_image_version
    # is used when creating a new site description, do determine 
    # from what image a container for the site-description should be created
    # IMPORTANT: the version should be the same as the erp_version in config.yaml
    erp_image_version: 'odoo-project:12.0-latest'


    # docker_local_user_id
    # the user id assigned to the odoo user within the running docker container
    # normally just leave it at its default
    docker_local_user_id: 999

    # values to be added to the config file
    # docker_addons_base_path will always be prepended to the addons_path
    # it could contain also $DOCKER_EXTRA_ADDONS which would be expanded
    docker_addons_base_path: /odoo/local-src,/odoo/src/addons,/mnt/extra-addons,
    docker_logrotate: True
    docker_syslog:  False
    docker_db_sslmode: 'prefer'
    docker_list_db: False
    docker_db_maxconn: 64
    docker_limit_memory_soft: 2147483648
    docker_limit_memory_hard: 2684354560
    docker_limit_request: 8192
    docker_limit_time_cpu: 60
    docker_limit_time_real: 120
    docker_limit_time_real_cron: 120
    docker_log_handler: ':INFO'
    docker_log_level: 'info'
    docker_logfile: False
    docker_log_db: False
    docker_max_cron_threads: 2
    docker_workers: 4
    docker_running_env: 'production'
    docker_without_demo: True
    docker_server_wide_modules': ''

# ----------------------------
# image creation
# ----------------------------
DOCKER_IMAGE:
    environment:
        # be careful to protect variables with spaces like follows:
        DUMMY: '"for nothing, just a sample"'

    # commands to use within a dockerfile to pull aditional libraries
    apt_command: apt
    pip_command: pip

# ----------------------------
# host mapping
# ----------------------------
# all path are relative to the sites data folder
HOST_MAPPING:
    /etc: /etc/odoo/
    /start-entrypoint.d: /opt/odoo/start-entrypoint.d/
    /addons: /mnt/extra-addons/
    /dump: /mnt/dump/
    /filestore: /var/lib/odoo/filestore/
    /: /var/lib/odoo/
    /log: /var/log/odoo/

# ----------------------------
# bitnami / helm
# ----------------------------
# info about bitnami & helm-charts
BITNAMI_DEFAULTS:
    # bitnami_git_url
    # is the github repo where we find bitnami-odoo
    bitnami_git_url: https://github.com/bitnami/bitnami-docker-odoo
    # bitnami_chart_url
    # what chart repository to use
    bitnami_chart_url: stable
    # bitnami_chart_name
    # how do we define a version?
    bitnami_chart_name: odoo
    # bitnami_folder_name
    # the name of the folder we construct within the site-desc data folder
    bitnami_folder_name: '%(SITE_DATA_DIR)s/bitnami'
    # bitnami_docker_file_path
    # the path within the bitnami repo where we find the Dockerfile
    bitnami_docker_file_path: bitnami-docker-odoo/11/debian-9/
    # bitnami_docker_tag
    # the tag we apply to the image 
    bitnami_docker_tag: 'bitnami-odoo-%(ERP_VERSION)s'
    # bitnami_dockerfile_apt_line
    # is the start of the line wher bitnmi installs abt libraries
    # into the image
    bitnami_dockerfile_apt_line: RUN install_packages
    # bitnami_dockerfile_pip_line
    # after the line beginning with this string we will insert the
    # installation of the pip modules
    bitnami_dockerfile_pip_line: RUN bitnami-pkg unpack odoo
    # bitnami_dockerfile_pip_install_command
    # command line to pip install the pip libraries
    bitnami_dockerfile_pip_install_command: RUN pip3 install --cache-dir=.pip
    # bitnami_dockerfile_apt_items
    # are apt library elements we must make sure to have included
    bitnami_dockerfile_apt_items:
        - python
        - python-libxslt1
        - python-pip
        - python3-pip
        - python3-setuptools

    # kubernetes_use_minikube
    # tells wheter we are usingin a local minikube
    kubernetes_use_minikube: True

