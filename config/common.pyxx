#!bin/python
import os
import sys
import getpass
from scripts.bcolors import bcolors

# ACT_USER is the actualy logged in user
ACT_USER = getpass.getuser()
# BASE_PATH is the home directory of erp_workbench
BASE_PATH  = os.path.split(os.path.split(os.path.realpath(__file__))[0])[0]
SITES_HOME = BASE_PATH #os.path.split(os.path.split(os.path.realpath(__file__))[0])[0]
# migrate folder will be used when migrating to a new odoo version
MIGRATE_FOLDER = '%s/upgrade/' % BASE_PATH
BASE_INFO = {}
#DB_USER = ACT_USER
DB_PASSWORD = 'admin'
SITES, SITES_LOCAL = {},{}
MARKER = ''
# what folders do we need to create in odoo_sites for a new site
FOLDERNAMES = ['addons','dump','etc','filestore', 'log', 'ssl', 'start-entrypoint.d', 'presets']

# first thing we do, is make sure there exists all *.yaml files
# if it does not exist, we copy it from ??.yaml.in

data_path = os.path.normpath('%s/config_data' % BASE_PATH)
user_home = os.path.expanduser('~')
yaml_dic = {}
for y_info in  (
        ('config', 'base_info.py'), 
        ('servers', 'servers_info.py'), 
        ('docker', 'docker_info.py'), 
        ('project', 'project_info.py')
    ):
    y_name, file_name = y_info
    config_yaml = '%s/config/%s.yaml' % (BASE_PATH, y_name)
    if not os.path.exists(config_yaml):
        from shutil import copyfile
        copyfile('%s.in' % config_yaml, config_yaml)
    # build a list to be sent to check_and_update_base_defaults
    yaml_dic[y_name] = (
        config_yaml,
        '%s/config/config_data/%s' % (BASE_PATH, file_name),
        '%s/templates/%s.yaml' % (BASE_PATH, y_name), 
    )

# the base info we need to access the various parts of erp-workbench 
# it is in the config.yaml file in the erp-workbench config folder
from scripts.construct_defaults import check_and_update_base_defaults
construct_result = {}
vals = {
    'USER_HOME' : user_home, 
    'BASE_PATH' : BASE_PATH,
    'ACT_USER'  : ACT_USER,
    'DB_USER'   : ACT_USER,
}
# from pprint import pformat
# print(pformat(yaml_dic))
must_reload = check_and_update_base_defaults(
    yaml_dic.values(),
    vals,
    construct_result
)

# now we can load the files we just created
BASEINFO_CHANGED = """
%s--------------------------------------------------
The structure of the config files have changed.
please check %s if everything ist correct.
--------------------------------------------------%s
""" %(bcolors.FAIL, config_yaml, bcolors.ENDC)

# base defaults are the defaults we are using for the base info if they where not set
NEED_BASEINFO = False
try:
    from config.config_data.base_info import BASE_DEFAULTS as BASE_INFO
except ImportError:
    NEED_BASEINFO = True
if NEED_BASEINFO or must_reload:
    print(BASEINFO_CHANGED)
if must_reload:
    if construct_result[yaml_dic['config'][0]]:
        BASE_INFO = construct_result[yaml_dic['config'][0]]['BASE_DEFAULTS']
# load docker info
if must_reload and construct_result[yaml_dic['docker'][0]]:
    DOCKER_DEFAULTS = construct_result[yaml_dic['docker'][0]]['DOCKER_DEFAULTS']
else:
    from config.config_data.docker_info import DOCKER_DEFAULTS
# load project defaults
if must_reload and construct_result[yaml_dic['project'][0]]:
    PROJECT_DEFAULTS = construct_result[yaml_dic['project'][0]]['PROJECT_DEFAULTS']
else:
    from config.config_data.project_info import PROJECT_DEFAULTS

# sites is a combination created from "regular" sites listed in sites.py
# an a list of localsites listed in local_sites.py
#from sites import SITES, SITES_L as SITES_LOCAL
# start with checking whether installation is finished
sites_handler = None
